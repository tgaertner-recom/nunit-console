trigger:
  branches:
    include: [ '*' ]
    exclude: [ 'refs/tags/*' ]

jobs:

- job: Windows
  condition: not(or(startsWith(variables['Build.SourceBranchName'], 'azure-linux-'),startsWith(variables['Build.SourceBranchName'], 'azure-macOS-')))
  pool:
    vmImage: windows-2022
  
  steps:

  - task: UseDotNet@2
    displayName: 'Install .NET 6.0'
    inputs:
      version: 6.x

  - task: UseDotNet@2
    displayName: 'Install .NET 5.0'
    inputs:
      version: 5.x

  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      version: 3.1.x
      
  - task: UseDotNet@2
    displayName: 'Install .NET Core runtime 2.1'
    inputs:
      packageType: runtime
      version: 2.1.x

  - powershell: .\build.ps1 --target=Test --configuration=Release
    displayName: Build and test

  # Workaround for https://github.com/nunit/nunit/issues/3012#issuecomment-441517922
  - task: PublishTestResults@2
    displayName: Publish net35 test results
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: test-results\net35\*.xml
      mergeTestResults: true
      testRunTitle: net35/Windows
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: Publish netcoreapp2.1 test results
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: test-results\netcoreapp2.1\*.xml
      mergeTestResults: true
      testRunTitle: netcoreapp2.1/Windows
    condition: succeededOrFailed()

  # - powershell: .\build.ps1 --target=PackageExistingBuild --artifact-dir='$(Build.ArtifactStagingDirectory)'
  #   displayName: Package

  # - task: PublishBuildArtifacts@1
  #   displayName: Save package artifacts
  #   inputs:
  #     PathtoPublish: $(Build.ArtifactStagingDirectory)
  #     ArtifactName: Package

- job: Linux
  dependsOn: Windows
  condition: not(or(startsWith(variables['Build.SourceBranchName'], 'azure-windows-'),startsWith(variables['Build.SourceBranchName'], 'azure-macOS-')))
  pool:
    vmImage: ubuntu-20.04
  steps:

  - task: UseDotNet@2
    displayName: 'Install .NET 6.0'
    inputs:
      version: 6.x

  - task: UseDotNet@2
    displayName: 'Install .NET 5.0'
    inputs:
      version: 5.x

  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      version: 3.1.x
      
  - task: UseDotNet@2
    displayName: 'Install .NET Core runtime 2.1'
    inputs:
      packageType: runtime
      version: 2.1.x

  - bash: |
     ./build.sh --target=Test --configuration=Release
    displayName: Build and Test

  # Workaround for https://github.com/nunit/nunit/issues/3012#issuecomment-441517922
  - task: PublishTestResults@2
    displayName: Publish net35 test results
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: test-results/net35/*.xml
      mergeTestResults: true
      testRunTitle: net35/Linux
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: Publish netcoreapp2.1 test results
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: test-results/netcoreapp2.1/*.xml
      mergeTestResults: true
      testRunTitle: netcoreapp2.1/Linux
    condition: succeededOrFailed()

- job: macOS
  dependsOn: Linux
  condition: not(or(startsWith(variables['Build.SourceBranchName'], 'azure-windows-'),startsWith(variables['Build.SourceBranchName'], 'azure-linux-')))
  pool:
    vmImage: macOS-11
  steps:

  - task: UseDotNet@2
    displayName: 'Install .NET 6.0'
    inputs:
      version: 6.x

  - task: UseDotNet@2
    displayName: 'Install .NET 5.0'
    inputs:
      version: 5.x

  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      version: 3.1.x
      
  - task: UseDotNet@2
    displayName: 'Install .NET Core runtime 2.1'
    inputs:
      packageType: runtime
      version: 2.1.x

  - bash:
     ./build.sh --target=Test --configuration=Release
    displayName: Build and test

  # Workaround for https://github.com/nunit/nunit/issues/3012#issuecomment-441517922
  - task: PublishTestResults@2
    displayName: Publish net35 test results
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: test-results/net35/*.xml
      mergeTestResults: true
      testRunTitle: net35/macOS
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: Publish netcoreapp2.1 test results
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: test-results/netcoreapp2.1/*.xml
      mergeTestResults: true
      testRunTitle: netcoreapp2.1/macOS
    condition: succeededOrFailed()
